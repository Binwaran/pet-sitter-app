import { supabase } from "@/utils/supabase";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  const { email, password } = req.body;

  // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ï‡∏≤‡∏° email
  const { data: user, error } = await supabase
    .from("users") // üîÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠ table ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Supabase ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    .select("*")
    .eq("email", email)
    .single();

  if (error || !user) {
    return res.status(401).json({ message: "Invalid email or password" });
  }

  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const isPasswordValid = await bcrypt.compare(password, user.password);

  if (!isPasswordValid) {
    return res.status(401).json({ message: "Invalid email or password" });
  }

  // ‚úÖ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
  const token = jwt.sign(
    {
      id: user.id,
      email: user.email,
    },
    process.env.JWT_SECRET, // ‡πÉ‡∏ä‡πâ secret ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô .env.local
    { expiresIn: "7d" } // ‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÄ‡∏ä‡πà‡∏ô 7 ‡∏ß‡∏±‡∏ô
  );

  // ‚úÖ ‡∏™‡πà‡∏á token ‡∏Å‡∏•‡∏±‡∏ö
  return res.status(200).json({
    message: "Login successful",
    token, // ‚úÖ token ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ frontend
    user: {
      id: user.id,
      email: user.email,
    },
  });
}